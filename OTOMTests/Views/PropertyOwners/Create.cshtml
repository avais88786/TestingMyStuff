@model OTOMTests.Models.ViewModels.PropertyOwnersViewModel

@{
    ViewBag.Title = "Create";
}

@Styles.Render("~/Content/CustomStyles/RepeatGroups_Tabs.css")

<h2>Create</h2>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>PropertyOwners</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.ProposerName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.ProposerName)
            @Html.ValidationMessageFor(model => model.ProposerName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.CompanyStatus)
        </div>

        <div class="editor-label">
            @Html.DropDownListFor(model => model.CompanyStatus, Model.CompanyStatuses)
        </div>

        @*@Html.ListBoxFor(model => model.CompanyStatus, ViewBag.CompanyStatus as SelectList)*@
        <div class="editor-label">
            @Html.LabelFor(model => model.Properties)
        </div>
        
        @*<div id="RepeatGroupContainer">
            @{var maxnumbers = Html.MaxRepeatGroupValue(model => model.Property);
            @Html.Hidden("MaxPropertyRepeatValue", maxnumbers)
                for (int i = 0; i < maxnumbers; i++)
                {
                    <div id="PropertyRepeatGroup_@i" class="editor-field" style="background-color:lightpink;width:50%;margin-bottom:10px;">
                        @Html.Raw("Property Id :" + i)
                        @Html.EditorFor(model => model.Property, new { id = i })
                    </div>
                }
            }
        </div>

        

        @Html.Hidden("currentPropertyRepeatGroupId",0)
        @Html.Label("Add property", new { id = "addProperty", style = "text-decoration:underline;color:red;cursor:pointer" })
        @Html.Label("Remove property", new { id = "removeProperty", style = "text-decoration:underline;color:red;cursor:pointer",hidden="hidden" })*@
        
        <br/><br/>
        <div id="RepeatGroupContainer_Tabs">

            @{ var maxnumbersforTabs = Html.MaxRepeatGroupValue(model => model.Properties);
              @Html.Hidden("MaxPropertyRepeatValue", maxnumbersforTabs)
                  for (int i = 0; i < maxnumbersforTabs; i++)
                  {
                    <div id="tabHeader_@i" class="tabHeader ">
                        <div id="tabHeaderSelector_@i" class="tabHeaderSelector"></div>
                        
                        @Html.Raw("Property " + (i+1))
                    </div>
                  }
                        <div id="tabAdd" class="tabAdd">+</div>
                
                @*@Html.EditorFor(model => model.Properties)*@
    for (int i = 0; i < maxnumbersforTabs; i++)
    {   
        
                    <div id="tabBody_@i" class="tabBody">
                        Property Id : @i
                        @{Model.Properties.Add(new PropertyRepeatGroup());}
                        @Html.EditorFor(model => model.Properties[i])

                    </div>
                  }
            }
            @Html.Hidden("currentPropertyRepeatGroupId_Tab", 0)
            @Html.Hidden("selectedPropertyRepeatGroupId_Tab", 0)
            @Html.Label("Add property", new { id = "addProperty_Tab", style = "text-decoration:underline;color:red;cursor:pointer;" })
        </div>



        <p>
            <input type="submit" value="Create" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/Scripts/CustomScripts/PropertyRepeatGroup.js")
}
