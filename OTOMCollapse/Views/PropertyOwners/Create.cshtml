@model OTOMCollapse.ViewModels.PropertyOwners.PropertyOwnersViewModel

@{
    ViewBag.Title = "Create";
}

@Styles.Render("~/Content/CustomStyles/RepeatGroups_Tabs.css")
@Styles.Render("~/Content/CustomStyles/Accordion.css")

<h2>Create</h2>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    
    <section>
    
        
        @Html.EditorForModel()
    @*<legend>PropertyOwners</legend>
    <section>
        <article>
            <div class="editor-label">
                @Html.LabelFor(model => model.CompanyStatus)
            </div>
            <div class="editor-field">
                @Html.DropDownListFor(model => model.CompanyStatus, Model.CompanyStatuses,"-- Please Select --", new { @class = "dropDownList" })
            </div>
        </article>

        <article>
            <div class="editor-label">
                @Html.LabelFor(model => model.Trades)
            </div>
            <div class="editor-field">
                @Html.DropDownListFor(model => model.Trade, Model.Trades, "-- Please Select --", new { @class = "dropDownList" })
            </div>
        </article>

        <label id="dropDownValueSelector"></label>

        <section class="tabs">
            <ul class="tabHeader">
                <li><a href="#declarationQuestionsTab" class="active">@Html.DisplayNameFor(model => model.DeclarationQuestions) </a></li>
                <li><a href="#standardQuestionsTab">@Html.DisplayNameFor(model => model.StandardQuestions)</a></li>
                <li><a href="#propertyDetailsQuestionsTab">@Html.DisplayNameFor(model => model.PropertyDetailsQuestions)</a></li>
                <li><a href="#generalCoversQuestionsTab">@Html.DisplayNameFor(model => model.GeneralCoversQuestions)</a></li>
                <li><a href="#claimsHistoryQuestionsTab">@Html.DisplayNameFor(model => model.ClaimsHistoryQuestions)</a></li>
            </ul>

            <section class="tabBodyContainer">
                <section id="declarationQuestionsTab">
                    @Html.EditorFor(model => model.DeclarationQuestions)
                    <input type="button" data-href="#standardQuestionsTab" class="tabNextButton" value="Next"/>
                </section>
            
                <section id="standardQuestionsTab">
                    @Html.EditorFor(model => model.StandardQuestions)
                    <input type="button" data-href="#propertyDetailsQuestionsTab" class="tabNextButton" value="Next" />
                </section>

                @*<section id="propertyDetailsQuestionsTab">
                    @Html.EditorFor(model => model.PropertyDetailsQuestions)
                    <input type="button" data-href="#propertyDetailsQuestionsTab" class="tabNextButton" value="Next" />
                </section>*@
            
            

        

        @*<section class="accordion">
            <section class="accordion-section">
                <a class="accordion-section-title" href="#accordion-declarationQuestions">
                    @Html.DisplayNameFor(model => model.DeclarationQuestions)
                </a>
                <section id="accordion-declarationQuestions" class="accordion-section-content">
                    @Html.EditorFor(model => model.DeclarationQuestions)
                </section>
            </section>
        </section>*@





        <p>
            <input type="submit" value="Create" />
        </p>
    </section>
    
    @*@Html.Partial(@"Partial\TabTest")*@
    
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/CustomScripts/PropertyRepeatGroup.js")
    @Scripts.Render("~/Scripts/CustomScripts/SectionsEventHandlers.js")
    @Scripts.Render("~/Scripts/CustomScripts/DropDowns.js")
    @*@Scripts.Render("~/Scripts/CustomScripts/GenericListStyle.js")*@
}
<script type="text/javascript">

    $(document).ready(function () {

        HideElements();

        function HideElements() {
            $(':input[type="hidden"][data-currentdisplayedrepeatinggroupsonpage]').each(function (index, element) {

                var currentDisplayedRepeatingGroups = $(this).data('currentdisplayedrepeatinggroupsonpage');

                if (currentDisplayedRepeatingGroups <= 1) {
                    var thisID = $(this).attr('id');
                    var z = $(':button[data-hiddenelementid="#' + thisID + '"]');
                    $(':button[data-hiddenelementid="#' + thisID + '"]').hide();
                }

            });
        };


        $("body").on("click", ":button[data-hiddenforelementid]", function () {
            //$(":button").click(function () {

            var clickedButton = $(this);
            var hiddenElementId = $(this).data("hiddenforelementid");

            var container = $(hiddenElementId).data('container');
            var property = $(hiddenElementId).data('property');
            var maxPossibleValue = $(hiddenElementId).data('maxpossiblevalue');
            var currentDisplayedRepeatingGroups = $(hiddenElementId).data('currentdisplayedrepeatinggroupsonpage');
            var currentRepeatingGroupIndex = $(hiddenElementId).data('currentindex');
            var nextIndex = currentRepeatingGroupIndex + 1;
            var htmlTemplateFieldPrefix = $(hiddenElementId).data('htmlfieldprefix');

            if (currentDisplayedRepeatingGroups >= maxPossibleValue) {
                return;
            }

            var xx = $(this).prevAll('section');
            var placeHolder = $(this).siblings('div').last();

            var datas = "property=" + property + "&nextIndex=" + nextIndex + "&htmlTemplateFieldPrefix=" + htmlTemplateFieldPrefix + "&container=" + container;

            $.ajax({
                url: '@Url.Action("avais", "PropertyOwners")',
                //url: "PropertyOwners/avais",
                data: datas,
                beforeSend: function () {
                    clickedButton.attr("disabled", true);
                },
                success: function (result) {
                    currentDisplayedRepeatingGroups = currentDisplayedRepeatingGroups + 1;
                    $(hiddenElementId).data('currentdisplayedrepeatinggroupsonpage', currentDisplayedRepeatingGroups);
                    $(hiddenElementId).attr('data-currentdisplayedrepeatinggroupsonpage', currentDisplayedRepeatingGroups);

                    $(hiddenElementId).data('currentindex', nextIndex);
                    $(hiddenElementId).attr('data-currentindex', nextIndex);

                    placeHolder.append(result);

                    if (currentDisplayedRepeatingGroups >= maxPossibleValue) {
                        clickedButton.fadeOut(500);
                    }

                    $(':button[data-hiddenelementid="' + hiddenElementId + '"]').slideDown();
                    HideElements();
                    clickedButton.removeAttr("disabled");
                },
                error: function () {
                    alert('failed');
                    clickedButton.removeAttr("disabled");
                }
            });


            //$.get("PropertyOwners/avais2", datas, function (result,status) {
            //    currentDisplayedRepeatingGroups = currentDisplayedRepeatingGroups + 1;
            //    $(hiddenElementId).data('currentdisplayedrepeatinggroupsonpage', currentDisplayedRepeatingGroups);
            //    $(hiddenElementId).attr('data-currentdisplayedrepeatinggroupsonpage', currentDisplayedRepeatingGroups);

            //    $(hiddenElementId).data('currentindex', nextIndex);
            //    $(hiddenElementId).attr('data-currentindex', nextIndex);

            //    placeHolder.append(result);

            //    if (currentDisplayedRepeatingGroups >= maxPossibleValue) {
            //        clickedButton.fadeOut(500);
            //    }

            //    $(':button[data-hiddenelementid="' + hiddenElementId + '"]').slideDown();
            //    HideElements();
            //});

        });

        $("body").on("click", ":button[data-placeholderelementidtoremove]", function () {


            var similarElementsName = $(this).data('mappedsimilarelements');
            //$(this).parent().siblings(':button[data-hiddenforelementid]').first().slideDown(300);
            //var hiddenElement = $(this).parent().siblings(':hidden[data-currentdisplayedrepeatinggroupsonpage]').first();//.slideDown(300);
            var hiddenElementId = $(this).data('hiddenelementid');
            var hiddenElement = $(hiddenElementId);

            hiddenElement.next(':button').slideDown(300);

            var currentDisplayedRepeatingGroups = hiddenElement.data('currentdisplayedrepeatinggroupsonpage');
            currentDisplayedRepeatingGroups = --currentDisplayedRepeatingGroups;
            hiddenElement.data('currentdisplayedrepeatinggroupsonpage', currentDisplayedRepeatingGroups);
            hiddenElement.attr('data-currentdisplayedrepeatinggroupsonpage', currentDisplayedRepeatingGroups);

            $(this).parent('section').last().fadeOut(500, function () {

                if (currentDisplayedRepeatingGroups == 1) {
                    $(':button[data-mappedsimilarelements="' + similarElementsName + '"]').hide();
                }


                $(this).remove();


            });

            //var addButtonId = $(this).data('mappedaddelementid');
            //$(addButtonId).slideDown(1000);
        });

    });


</script>

