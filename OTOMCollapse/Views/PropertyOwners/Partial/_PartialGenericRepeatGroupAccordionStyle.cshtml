@model OTOMCollapse.Models.RepeatGroups.RepeatGroupContainer

@{var templateInfo = (string)ViewData["htmlFieldPrefix"];
int index = (int)ViewData["Index"];
string propertyName = (string)ViewData["property"];
    //var x = Model.GetTemplateName(propertyName);
}

@{if (index == 0)
{
    <section id=@Html.Raw("RepeatGroupContainer" + ViewData["idToAppend"]) class="accordion">
        <div data-placeholderelementid=@Html.Raw("placeholder" + ViewData["idToAppend"]) class="accordion-section-title" >
            @Html.EditorFor(model => model.GetPropertyType(propertyName).RepeatGroupProperty, Model.GetTemplateName(propertyName), templateInfo)

            @*This Does not work :
            @*Html.EditorFor(model => model.GetProperty().RepeatGroupProperty, "SubsidiaryCompanyRepeatGroup", new ViewDataDictionary(ViewData) { TemplateInfo = ViewData.TemplateInfo })
            @*Brings: StandardQuestions.SubsidiaryCompanies[0].RepeatGroupProperty.CompanyName*@
        </div>
    </section>
}
  else
  {
    <div data-placeholderelementid=@Html.Raw("placeholder" + ViewData["idToAppend"]+index) class="accordion-section-title" >
        @Html.EditorFor(model => model.GetPropertyType(propertyName).RepeatGroupProperty, Model.GetTemplateName(propertyName), templateInfo)@*, new ViewDataDictionary(ViewData) { TemplateInfo = templateInfo })*@
        <input type="button" value="Remove" style="float:right;" data-placeholderelementidtoremove=@Html.Raw("placeholder" + ViewData["idToAppend"] + index) data-mappedaddelementid=@Html.Raw("add" + ViewData["idToAppend"]) />
    </div>
  }}
